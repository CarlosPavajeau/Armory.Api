// <auto-generated />
using System;
using Armory.Shared.Infrastructure.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Armory.Migrations
{
    [DbContext(typeof(ArmoryDbContext))]
    [Migration("20210807171528_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Armory.Armament.Ammunition.Domain.Ammunition", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Ammunition");
                });

            modelBuilder.Entity("Armory.Armament.Equipments.Domain.Equipment", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Armory.Armament.Explosives.Domain.Explosive", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Explosives");
                });

            modelBuilder.Entity("Armory.Armament.Weapons.Domain.Weapon", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("NumberOfProviders")
                        .HasColumnType("int");

                    b.Property<int>("ProviderCapacity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SquadCode");

                    b.HasIndex("SquadronCode");

                    b.ToTable("AssignedWeaponMagazineFormats");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormatItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedWeaponMagazineFormatId")
                        .HasColumnType("int");

                    b.Property<bool>("CartridgeOfLife")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Novelty")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Observations")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("TroopId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("VerifiedInPhysical")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWeaponMagazineFormatId");

                    b.HasIndex("TroopId");

                    b.ToTable("AssignedWeaponMagazineFormatItems");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocMovement")
                        .HasColumnType("int");

                    b.Property<string>("Others")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PhysicalLocation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TroopId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SquadCode");

                    b.HasIndex("SquadronCode");

                    b.HasIndex("TroopId");

                    b.ToTable("WarMaterialAndSpecialEquipmentAssignmentFormats");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition", b =>
                {
                    b.Property<string>("AmmunitionCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("AmmunitionCode", "WarMaterialAndSpecialEquipmentAssignmentFormatId");

                    b.HasIndex("WarMaterialAndSpecialEquipmentAssignmentFormatId");

                    b.ToTable("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatEquipment", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "EquipmentCode");

                    b.HasIndex("EquipmentCode");

                    b.ToTable("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatExplosive", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int");

                    b.Property<string>("ExplosiveCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "ExplosiveCode");

                    b.HasIndex("ExplosiveCode");

                    b.ToTable("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatWeapon", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponCode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "WeaponCode");

                    b.HasIndex("WeaponCode");

                    b.ToTable("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TroopId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SquadCode");

                    b.HasIndex("SquadronCode");

                    b.HasIndex("TroopId");

                    b.ToTable("WarMaterialDeliveryCertificateFormats");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatAmmunition", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int");

                    b.Property<string>("AmmunitionCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "AmmunitionCode");

                    b.HasIndex("AmmunitionCode");

                    b.ToTable("WarMaterialDeliveryCertificateFormatAmmunition");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatEquipment", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "EquipmentCode");

                    b.HasIndex("EquipmentCode");

                    b.ToTable("WarMaterialDeliveryCertificateFormatEquipments");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatExplosive", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int");

                    b.Property<string>("ExplosiveCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "ExplosiveCode");

                    b.HasIndex("ExplosiveCode");

                    b.ToTable("WarMaterialDeliveryCertificateFormatExplosives");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatWeapon", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponCode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "WeaponCode");

                    b.HasIndex("WeaponCode");

                    b.ToTable("WarMaterialDeliveryCertificateFormatWeapons");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ArmoryUserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArmoryUserId")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("Armory.Ranks.Domain.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Code");

                    b.HasIndex("PersonId");

                    b.ToTable("Squadrons");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Code");

                    b.HasIndex("PersonId");

                    b.HasIndex("SquadronCode");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("Armory.Troopers.Domain.Troop", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("SquadCode");

                    b.ToTable("Troopers");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.HasOne("Armory.Ranks.Domain.Rank", "Rank")
                        .WithMany("Degrees")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormatItem", b =>
                {
                    b.HasOne("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", "AssignedWeaponMagazineFormat")
                        .WithMany("Records")
                        .HasForeignKey("AssignedWeaponMagazineFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Troop")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedWeaponMagazineFormat");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Applicant")
                        .WithMany()
                        .HasForeignKey("TroopId");

                    b.Navigation("Applicant");

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition", b =>
                {
                    b.HasOne("Armory.Armament.Ammunition.Domain.Ammunition", "Ammunition")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition")
                        .HasForeignKey("AmmunitionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ammunition");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatEquipment", b =>
                {
                    b.HasOne("Armory.Armament.Equipments.Domain.Equipment", "Equipment")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments")
                        .HasForeignKey("EquipmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatExplosive", b =>
                {
                    b.HasOne("Armory.Armament.Explosives.Domain.Explosive", "Explosive")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives")
                        .HasForeignKey("ExplosiveCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Explosive");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatWeapon", b =>
                {
                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Armament.Weapons.Domain.Weapon", "Weapon")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons")
                        .HasForeignKey("WeaponCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Applicant")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatAmmunition", b =>
                {
                    b.HasOne("Armory.Armament.Ammunition.Domain.Ammunition", "Ammunition")
                        .WithMany("WarMaterialDeliveryCertificateFormatAmmunition")
                        .HasForeignKey("AmmunitionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatAmmunition")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ammunition");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatEquipment", b =>
                {
                    b.HasOne("Armory.Armament.Equipments.Domain.Equipment", "Equipment")
                        .WithMany("WarMaterialDeliveryCertificateFormatEquipments")
                        .HasForeignKey("EquipmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatEquipments")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatExplosive", b =>
                {
                    b.HasOne("Armory.Armament.Explosives.Domain.Explosive", "Explosive")
                        .WithMany("WarMaterialDeliveryCertificateFormatExplosives")
                        .HasForeignKey("ExplosiveCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatExplosives")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Explosive");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatWeapon", b =>
                {
                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatWeapons")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Armament.Weapons.Domain.Weapon", "Weapon")
                        .WithMany("WarMaterialDeliveryCertificateFormatWeapons")
                        .HasForeignKey("WeaponCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", "ArmoryUser")
                        .WithOne("Person")
                        .HasForeignKey("Armory.People.Domain.Person", "ArmoryUserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ArmoryUser");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.HasOne("Armory.People.Domain.Person", "Owner")
                        .WithMany("Squadrons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.HasOne("Armory.People.Domain.Person", "Owner")
                        .WithMany("Squads")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Squadron")
                        .WithMany("Squads")
                        .HasForeignKey("SquadronCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Squadron");
                });

            modelBuilder.Entity("Armory.Troopers.Domain.Troop", b =>
                {
                    b.HasOne("Armory.Degrees.Domain.Degree", "Degree")
                        .WithMany("Troopers")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squads.Domain.Squad", "Squad")
                        .WithMany("Troopers")
                        .HasForeignKey("SquadCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Armory.Armament.Ammunition.Domain.Ammunition", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition");

                    b.Navigation("WarMaterialDeliveryCertificateFormatAmmunition");
                });

            modelBuilder.Entity("Armory.Armament.Equipments.Domain.Equipment", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments");

                    b.Navigation("WarMaterialDeliveryCertificateFormatEquipments");
                });

            modelBuilder.Entity("Armory.Armament.Explosives.Domain.Explosive", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives");

                    b.Navigation("WarMaterialDeliveryCertificateFormatExplosives");
                });

            modelBuilder.Entity("Armory.Armament.Weapons.Domain.Weapon", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons");

                    b.Navigation("WarMaterialDeliveryCertificateFormatWeapons");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.Navigation("Troopers");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.Navigation("WarMaterialDeliveryCertificateFormatAmmunition");

                    b.Navigation("WarMaterialDeliveryCertificateFormatEquipments");

                    b.Navigation("WarMaterialDeliveryCertificateFormatExplosives");

                    b.Navigation("WarMaterialDeliveryCertificateFormatWeapons");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.Navigation("Squadrons");

                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Armory.Ranks.Domain.Rank", b =>
                {
                    b.Navigation("Degrees");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.Navigation("Troopers");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryUser", b =>
                {
                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
