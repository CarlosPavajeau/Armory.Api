// <auto-generated />
using System;
using Armory.Shared.Infrastructure.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Armory.Migrations
{
    [DbContext(typeof(ArmoryDbContext))]
    [Migration("20210907205616_RemoveWeaponLot")]
    partial class RemoveWeaponLot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Armory.Armament.Ammunition.Domain.Ammunition", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("caliber");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("lot");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("mark");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("quantity_available");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("series");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type");

                    b.HasKey("Code")
                        .HasName("pk_ammunition");

                    b.ToTable("ammunition");
                });

            modelBuilder.Entity("Armory.Armament.Equipments.Domain.Equipment", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("model");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("quantity_available");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("series");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type");

                    b.HasKey("Code")
                        .HasName("pk_equipments");

                    b.ToTable("equipments");
                });

            modelBuilder.Entity("Armory.Armament.Explosives.Domain.Explosive", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("caliber");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("lot");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("mark");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("quantity_available");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("series");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type");

                    b.HasKey("Code")
                        .HasName("pk_explosives");

                    b.ToTable("explosives");
                });

            modelBuilder.Entity("Armory.Armament.Weapons.Domain.Weapon", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("caliber");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("mark");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("model");

                    b.Property<int>("NumberOfProviders")
                        .HasColumnType("int")
                        .HasColumnName("number_of_providers");

                    b.Property<int>("ProviderCapacity")
                        .HasColumnType("int")
                        .HasColumnName("provider_capacity");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("series");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<string>("TroopId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("troop_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type");

                    b.HasKey("Code")
                        .HasName("pk_weapons");

                    b.HasIndex("Series")
                        .IsUnique()
                        .HasDatabaseName("ix_weapons_series");

                    b.HasIndex("TroopId")
                        .HasDatabaseName("ix_weapons_troop_id");

                    b.ToTable("weapons");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<int>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("rank_id");

                    b.HasKey("Id")
                        .HasName("pk_degrees");

                    b.HasIndex("RankId")
                        .HasDatabaseName("ix_degrees_rank_id");

                    b.ToTable("degrees");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Comments")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squad_code");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squadron_code");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("validity");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int")
                        .HasColumnName("warehouse");

                    b.HasKey("Id")
                        .HasName("pk_assigned_weapon_magazine_formats");

                    b.HasIndex("SquadCode")
                        .HasDatabaseName("ix_assigned_weapon_magazine_formats_squad_code");

                    b.HasIndex("SquadronCode")
                        .HasDatabaseName("ix_assigned_weapon_magazine_formats_squadron_code");

                    b.ToTable("assigned_weapon_magazine_formats");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormatItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AmmunitionLot")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ammunition_lot");

                    b.Property<int>("AmmunitionQuantity")
                        .HasColumnType("int")
                        .HasColumnName("ammunition_quantity");

                    b.Property<int>("AssignedWeaponMagazineFormatId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_weapon_magazine_format_id");

                    b.Property<bool>("CartridgeOfLife")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cartridge_of_life");

                    b.Property<bool>("Novelty")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("novelty");

                    b.Property<string>("Observations")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("observations");

                    b.Property<string>("TroopId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("troop_id");

                    b.Property<bool>("VerifiedInPhysical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified_in_physical");

                    b.Property<string>("WeaponCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("weapon_code");

                    b.HasKey("Id")
                        .HasName("pk_assigned_weapon_magazine_format_items");

                    b.HasIndex("AssignedWeaponMagazineFormatId")
                        .HasDatabaseName("ix_assigned_weapon_magazine_format_items_assigned_weapon_magazi");

                    b.HasIndex("TroopId")
                        .HasDatabaseName("ix_assigned_weapon_magazine_format_items_troop_id");

                    b.HasIndex("WeaponCode")
                        .HasDatabaseName("ix_assigned_weapon_magazine_format_items_weapon_code");

                    b.ToTable("assigned_weapon_magazine_format_items");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("DocMovement")
                        .HasColumnType("int")
                        .HasColumnName("doc_movement");

                    b.Property<string>("Others")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("others");

                    b.Property<string>("PhysicalLocation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("physical_location");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("place");

                    b.Property<int>("Purpose")
                        .HasColumnType("int")
                        .HasColumnName("purpose");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squad_code");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squadron_code");

                    b.Property<string>("TroopId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("troop_id");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("validity");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int")
                        .HasColumnName("warehouse");

                    b.HasKey("Id")
                        .HasName("pk_war_material_and_special_equipment_assignment_formats");

                    b.HasIndex("SquadCode")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_formats_squad_");

                    b.HasIndex("SquadronCode")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_formats_squadr");

                    b.HasIndex("TroopId")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_formats_troop_");

                    b.ToTable("war_material_and_special_equipment_assignment_formats");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition", b =>
                {
                    b.Property<string>("AmmunitionCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ammunition_code");

                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_and_special_equipment_assignment_format_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("AmmunitionCode", "WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasName("pk_war_material_and_special_equipment_assignment_format_ammunit");

                    b.HasIndex("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_format_ammunit");

                    b.ToTable("war_material_and_special_equipment_assignment_format_ammunition");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatEquipment", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_and_special_equipment_assignment_format_id");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("equipment_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "EquipmentCode")
                        .HasName("pk_war_material_and_special_equipment_assignment_format_equipme");

                    b.HasIndex("EquipmentCode")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_format_equipme");

                    b.ToTable("war_material_and_special_equipment_assignment_format_equipments");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatExplosive", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_and_special_equipment_assignment_format_id");

                    b.Property<string>("ExplosiveCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("explosive_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "ExplosiveCode")
                        .HasName("pk_war_material_and_special_equipment_assignment_format_explosi");

                    b.HasIndex("ExplosiveCode")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_format_explosi");

                    b.ToTable("war_material_and_special_equipment_assignment_format_explosives");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatWeapon", b =>
                {
                    b.Property<int>("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_and_special_equipment_assignment_format_id");

                    b.Property<string>("WeaponCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("weapon_code");

                    b.HasKey("WarMaterialAndSpecialEquipmentAssignmentFormatId", "WeaponCode")
                        .HasName("pk_war_material_and_special_equipment_assignment_format_weapons");

                    b.HasIndex("WeaponCode")
                        .HasDatabaseName("ix_war_material_and_special_equipment_assignment_format_weapons");

                    b.ToTable("war_material_and_special_equipment_assignment_format_weapons");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("place");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squad_code");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squadron_code");

                    b.Property<string>("TroopId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("troop_id");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("validity");

                    b.HasKey("Id")
                        .HasName("pk_war_material_delivery_certificate_formats");

                    b.HasIndex("SquadCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_formats_squad_code");

                    b.HasIndex("SquadronCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_formats_squadron_code");

                    b.HasIndex("TroopId")
                        .HasDatabaseName("ix_war_material_delivery_certificate_formats_troop_id");

                    b.ToTable("war_material_delivery_certificate_formats");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatAmmunition", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_delivery_certificate_format_id");

                    b.Property<string>("AmmunitionCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ammunition_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "AmmunitionCode")
                        .HasName("pk_war_material_delivery_certificate_format_ammunition");

                    b.HasIndex("AmmunitionCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_format_ammunition_ammuniti");

                    b.ToTable("war_material_delivery_certificate_format_ammunition");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatEquipment", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_delivery_certificate_format_id");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("equipment_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "EquipmentCode")
                        .HasName("pk_war_material_delivery_certificate_format_equipments");

                    b.HasIndex("EquipmentCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_format_equipments_equipmen");

                    b.ToTable("war_material_delivery_certificate_format_equipments");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatExplosive", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_delivery_certificate_format_id");

                    b.Property<string>("ExplosiveCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("explosive_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "ExplosiveCode")
                        .HasName("pk_war_material_delivery_certificate_format_explosives");

                    b.HasIndex("ExplosiveCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_format_explosives_explosiv");

                    b.ToTable("war_material_delivery_certificate_format_explosives");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatWeapon", b =>
                {
                    b.Property<int>("WarMaterialDeliveryCertificateFormatId")
                        .HasColumnType("int")
                        .HasColumnName("war_material_delivery_certificate_format_id");

                    b.Property<string>("WeaponCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("weapon_code");

                    b.HasKey("WarMaterialDeliveryCertificateFormatId", "WeaponCode")
                        .HasName("pk_war_material_delivery_certificate_format_weapons");

                    b.HasIndex("WeaponCode")
                        .HasDatabaseName("ix_war_material_delivery_certificate_format_weapons_weapon_code");

                    b.ToTable("war_material_delivery_certificate_format_weapons");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("ArmoryUserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("armory_user_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("second_last_name");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("second_name");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("ArmoryUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_people_armory_user_id");

                    b.ToTable("people");
                });

            modelBuilder.Entity("Armory.Ranks.Domain.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_ranks");

                    b.ToTable("ranks");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("person_id");

                    b.HasKey("Code")
                        .HasName("pk_squadrons");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_squadrons_person_id");

                    b.ToTable("squadrons");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("person_id");

                    b.Property<string>("SquadronCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squadron_code");

                    b.HasKey("Code")
                        .HasName("pk_squads");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_squads_person_id");

                    b.HasIndex("SquadronCode")
                        .HasDatabaseName("ix_squads_squadron_code");

                    b.ToTable("squads");
                });

            modelBuilder.Entity("Armory.Troopers.Domain.Troop", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int")
                        .HasColumnName("degree_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("second_last_name");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("second_name");

                    b.Property<string>("SquadCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("squad_code");

                    b.HasKey("Id")
                        .HasName("pk_troopers");

                    b.HasIndex("DegreeId")
                        .HasDatabaseName("ix_troopers_degree_id");

                    b.HasIndex("SquadCode")
                        .HasDatabaseName("ix_troopers_squad_code");

                    b.ToTable("troopers");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_phone_number");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Armory.Armament.Weapons.Domain.Weapon", b =>
                {
                    b.HasOne("Armory.Troopers.Domain.Troop", "Owner")
                        .WithMany("Weapons")
                        .HasForeignKey("TroopId")
                        .HasConstraintName("fk_weapons_troopers_troop_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.HasOne("Armory.Ranks.Domain.Rank", "Rank")
                        .WithMany("Degrees")
                        .HasForeignKey("RankId")
                        .HasConstraintName("fk_degrees_ranks_rank_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .HasConstraintName("fk_assigned_weapon_magazine_formats_squads_squad_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .HasConstraintName("fk_assigned_weapon_magazine_formats_squadrons_squadron_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormatItem", b =>
                {
                    b.HasOne("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", "Format")
                        .WithMany("Records")
                        .HasForeignKey("AssignedWeaponMagazineFormatId")
                        .HasConstraintName("fk_assigned_weapon_magazine_format_items_assigned_weapon_magazi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Troop")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .HasConstraintName("fk_assigned_weapon_magazine_format_items_troopers_troop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Armament.Weapons.Domain.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponCode")
                        .HasConstraintName("fk_assigned_weapon_magazine_format_items_weapons_weapon_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Troop");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_formats_squads")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_formats_squadr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Applicant")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_formats_troope");

                    b.Navigation("Applicant");

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition", b =>
                {
                    b.HasOne("Armory.Armament.Ammunition.Domain.Ammunition", "Ammunition")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition")
                        .HasForeignKey("AmmunitionCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_ammunit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_ammunit1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ammunition");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatEquipment", b =>
                {
                    b.HasOne("Armory.Armament.Equipments.Domain.Equipment", "Equipment")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments")
                        .HasForeignKey("EquipmentCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_equipme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_equipme1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatExplosive", b =>
                {
                    b.HasOne("Armory.Armament.Explosives.Domain.Explosive", "Explosive")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives")
                        .HasForeignKey("ExplosiveCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_explosi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_explosi1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Explosive");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormatWeapon", b =>
                {
                    b.HasOne("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", "Format")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons")
                        .HasForeignKey("WarMaterialAndSpecialEquipmentAssignmentFormatId")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_weapons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Armament.Weapons.Domain.Weapon", "Weapon")
                        .WithMany("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons")
                        .HasForeignKey("WeaponCode")
                        .HasConstraintName("fk_war_material_and_special_equipment_assignment_format_weapons1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.HasOne("Armory.Squads.Domain.Squad", "Dependency")
                        .WithMany()
                        .HasForeignKey("SquadCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_formats_squads_squad_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Unit")
                        .WithMany()
                        .HasForeignKey("SquadronCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_formats_squadrons_squadron")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Troopers.Domain.Troop", "Applicant")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .HasConstraintName("fk_war_material_delivery_certificate_formats_troopers_troop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Dependency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatAmmunition", b =>
                {
                    b.HasOne("Armory.Armament.Ammunition.Domain.Ammunition", "Ammunition")
                        .WithMany("WarMaterialDeliveryCertificateFormatAmmunition")
                        .HasForeignKey("AmmunitionCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_ammunition_ammuniti")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatAmmunition")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_ammunition_war_mate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ammunition");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatEquipment", b =>
                {
                    b.HasOne("Armory.Armament.Equipments.Domain.Equipment", "Equipment")
                        .WithMany("WarMaterialDeliveryCertificateFormatEquipments")
                        .HasForeignKey("EquipmentCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_equipments_equipmen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatEquipments")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_equipments_war_mate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatExplosive", b =>
                {
                    b.HasOne("Armory.Armament.Explosives.Domain.Explosive", "Explosive")
                        .WithMany("WarMaterialDeliveryCertificateFormatExplosives")
                        .HasForeignKey("ExplosiveCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_explosives_explosiv")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatExplosives")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_explosives_war_mate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Explosive");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormatWeapon", b =>
                {
                    b.HasOne("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", "Format")
                        .WithMany("WarMaterialDeliveryCertificateFormatWeapons")
                        .HasForeignKey("WarMaterialDeliveryCertificateFormatId")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_weapons_war_materia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Armament.Weapons.Domain.Weapon", "Weapon")
                        .WithMany("WarMaterialDeliveryCertificateFormatWeapons")
                        .HasForeignKey("WeaponCode")
                        .HasConstraintName("fk_war_material_delivery_certificate_format_weapons_weapons_wea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", "ArmoryUser")
                        .WithOne("Person")
                        .HasForeignKey("Armory.People.Domain.Person", "ArmoryUserId")
                        .HasConstraintName("fk_people_users_armory_user_id")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ArmoryUser");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.HasOne("Armory.People.Domain.Person", "Owner")
                        .WithMany("Squadrons")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_squadrons_people_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.HasOne("Armory.People.Domain.Person", "Owner")
                        .WithMany("Squads")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_squads_people_person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squadrons.Domain.Squadron", "Squadron")
                        .WithMany("Squads")
                        .HasForeignKey("SquadronCode")
                        .HasConstraintName("fk_squads_squadrons_squadron_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Squadron");
                });

            modelBuilder.Entity("Armory.Troopers.Domain.Troop", b =>
                {
                    b.HasOne("Armory.Degrees.Domain.Degree", "Degree")
                        .WithMany("Troopers")
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("fk_troopers_degrees_degree_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Squads.Domain.Squad", "Squad")
                        .WithMany("Troopers")
                        .HasForeignKey("SquadCode")
                        .HasConstraintName("fk_troopers_squads_squad_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Armory.Users.Domain.ArmoryUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Armory.Armament.Ammunition.Domain.Ammunition", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition");

                    b.Navigation("WarMaterialDeliveryCertificateFormatAmmunition");
                });

            modelBuilder.Entity("Armory.Armament.Equipments.Domain.Equipment", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments");

                    b.Navigation("WarMaterialDeliveryCertificateFormatEquipments");
                });

            modelBuilder.Entity("Armory.Armament.Explosives.Domain.Explosive", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives");

                    b.Navigation("WarMaterialDeliveryCertificateFormatExplosives");
                });

            modelBuilder.Entity("Armory.Armament.Weapons.Domain.Weapon", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons");

                    b.Navigation("WarMaterialDeliveryCertificateFormatWeapons");
                });

            modelBuilder.Entity("Armory.Degrees.Domain.Degree", b =>
                {
                    b.Navigation("Troopers");
                });

            modelBuilder.Entity("Armory.Formats.AssignedWeaponMagazineFormats.Domain.AssignedWeaponMagazineFormat", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialAndSpecialEquipmentAssignmentFormats.Domain.WarMaterialAndSpecialEquipmentAssignmentFormat", b =>
                {
                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatAmmunition");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatEquipments");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatExplosives");

                    b.Navigation("WarMaterialAndSpecialEquipmentAssignmentFormatWeapons");
                });

            modelBuilder.Entity("Armory.Formats.WarMaterialDeliveryCertificateFormats.Domain.WarMaterialDeliveryCertificateFormat", b =>
                {
                    b.Navigation("WarMaterialDeliveryCertificateFormatAmmunition");

                    b.Navigation("WarMaterialDeliveryCertificateFormatEquipments");

                    b.Navigation("WarMaterialDeliveryCertificateFormatExplosives");

                    b.Navigation("WarMaterialDeliveryCertificateFormatWeapons");
                });

            modelBuilder.Entity("Armory.People.Domain.Person", b =>
                {
                    b.Navigation("Squadrons");

                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Armory.Ranks.Domain.Rank", b =>
                {
                    b.Navigation("Degrees");
                });

            modelBuilder.Entity("Armory.Squadrons.Domain.Squadron", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Armory.Squads.Domain.Squad", b =>
                {
                    b.Navigation("Troopers");
                });

            modelBuilder.Entity("Armory.Troopers.Domain.Troop", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Armory.Users.Domain.ArmoryUser", b =>
                {
                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
